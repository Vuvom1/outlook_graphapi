[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "W",  # pycodestyle warnings
]

ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise without from inside except
    "N806",  # variable in function should be lowercase
    "N802",  # function name should be lowercase
    "N803",  # argument name should be lowercase
    "UP007", # use X | Y for type annotations (not compatible with older Python)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"test/**/*.py" = [
    "PLR2004",
    "S101",
    "TID252",
]
# main.py needs imports after gevent monkey patching
"main.py" = [
    "E402",  # Module level import not at top of file
]

[tool.ruff.lint.isort]
known-first-party = ["tools", "services", "routers", "schemas", "providers"]

[tool.pylint.main]
# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Files or directories to be skipped. They should be base names, not paths.
ignore = ["CVS", ".venv", "__pycache__", ".git"]

# Files or directories matching the regex patterns are skipped. The regex
# matches against base names, not paths.
ignore-patterns = [".*_pb2.py", "test_.*"]

# Add files or directories to the blacklist. They should be base names, not paths.
ignore-paths = [".venv", "__pycache__"]

# Use multiple processes to speed up Pylint.
jobs = 1

# Minimum Python version to use for version dependent checks
py-version = "3.13"

# Discover python modules and packages in the file system subtree.
recursive = true

[tool.pylint.messages_control]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence = []

# Disable the message, report, category or checker with the given id(s).
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "missing-module-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "broad-exception-caught",
    "import-outside-toplevel",
]

# Enable the message, report, category or checker with the given id(s).
enable = []

[tool.pylint.reports]
# Template used to display messages. This is a python new-style format string
# used to format the message information.
msg-template = "{path}:{line}:{column}: [{msg_id}({symbol})] {msg}"

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio).
output-format = "text"

# Tells whether to display a full report or only the messages.
reports = false

# Activate the evaluation score.
score = true

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "old"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging"]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Imports are removed from the similarity computation
ignore-imports = false

# Signatures are removed from the similarity computation
ignore-signatures = false

# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the 'pyenchant' package.
spelling-dict = ""

# List of comma separated words that should not be checked.
spelling-ignore-words = ""

# A path to a file that contains the private dictionary; one word per line.
spelling-private-dict-file = ""

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words = false

[tool.pylint.string]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = false

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps = false

[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = ["contextlib.contextmanager"]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members = []

# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
ignore-mixin-members = true

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none = true

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results, and some of them can be correct (for
# example, in Union types).
ignore-on-opaque-inference = true

# List of symbolic message names to ignore for Mixin class. This is used to
# ignore some warning messages in Mixin classes (e.g. no-member, not-async-context-manager).
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager"]

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]

# Show a hint with the correct spelling when a missing member is detected.
missing-member-hint = true

# The minimum edit distance a name should have to be considered a similar match
# for a missing member.
missing-member-hint-distance = 1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1

# Regex pattern to define which classes are considered mixins.
mixin-class-rgx = ".*[Mm]ixin"

# List of decorators that change the signature of a decorated function.
signature-mutators = []

[tool.pylint.variables]
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins = []

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true

# List of names allowed to shadow builtins
allowed-redefined-builtins = []

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks = ["cb_", "_cb"]

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

# Argument names that match this expression will be ignored.
ignored-argument-names = "_.*|^ignored_|^unused_"

# Tells whether we should check for unused import in __init__ files.
init-import = false

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]

[tool.pylint.classes]
# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods = false

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "_mock_return_value", "_mock_side_effect"]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls"]

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
exclude-too-few-public-methods = []

# List of qualified class names to ignore when counting class parents (see R0901)
ignored-parents = []

# Maximum number of arguments for function / method.
max-args = 7

# Maximum number of attributes for a class (see R0902).
max-attributes = 10

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

# Maximum number of branch for function / method body.
max-branches = 15

# Maximum number of locals for function / method body.
max-locals = 20

# Maximum number of parents for a class (see R0901).
max-parents = 7

# Maximum number of public methods for a class (see R0904).
max-public-methods = 25

# Maximum number of return / yield for function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 50

# Minimum number of public methods for a class (see R0903).
min-public-methods = 1

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["BaseException", "Exception"]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = ""

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1 tab).
indent-string = "    "

# Maximum number of characters on a single line.
max-line-length = 120

# Maximum number of lines in a module.
max-module-lines = 1000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt = false

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt = false

[tool.pylint.imports]
# List of modules that can be imported at any level, not just the top level
allow-any-import-level = []

# Allow explicit reexports by alias from a package __init__.
allow-reexport-from-package = false

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all = false

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library = []

# Force import order to recognize a module as part of a third party library.
known-third-party = ["enchant"]

# Couples of modules and preferred modules, separated by a comma.
preferred-modules = []

[tool.pylint.method_args]
# List of qualified names (i.e., library.method) which require a timeout
# parameter e.g. 'requests.api.get,requests.api.post'
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]
